<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="_state_estimation_task_8cpp" kind="file" language="C++">
    <compoundname>StateEstimationTask.cpp</compoundname>
    <includes refid="_state_estimation_task_8h" local="yes">Tasks/include/StateEstimationTask.h</includes>
    <includes refid="_telemetry_task_8h" local="yes">Tasks/include/TelemetryTask.h</includes>
    <includes refid="_drop_o_s_8h" local="yes">OS/include/DropOS.h</includes>
    <includes refid="_o_s___c_o_n_f_i_g_8h" local="yes">OS_CONFIG.h</includes>
    <includes refid="_task_wrapper__t_8h" local="yes">OS/include/TaskWrapper_t.h</includes>
    <includes refid="_tasks_8h" local="yes">Tasks/include/Tasks.h</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="7">
        <label>DropOS.h</label>
        <link refid="_drop_o_s_8h"/>
      </node>
      <node id="6">
        <label>ITaskWrapper_t.h</label>
        <link refid="_i_task_wrapper__t_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>OS/include/TaskWrapper_t.h</label>
        <link refid="_task_wrapper__t_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>OS_CONFIG.h</label>
        <link refid="_o_s___c_o_n_f_i_g_8h"/>
      </node>
      <node id="8">
        <label>Structs/include/LidarData.h</label>
        <link refid="_lidar_data_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Tasks/include/DummySenderTask.h</label>
        <link refid="_dummy_sender_task_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Tasks/include/FSMTask.h</label>
        <link refid="_f_s_m_task_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Tasks/include/GPSTask.h</label>
        <link refid="_g_p_s_task_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Tasks/include/IMUTask.h</label>
        <link refid="_i_m_u_task_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Tasks/include/LidarTask.h</label>
        <link refid="_lidar_task_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Tasks/include/StateEstimationTask.h</label>
        <link refid="_state_estimation_task_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Tasks/include/Tasks.h</label>
        <link refid="_tasks_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Tasks/include/TelemetryTask.h</label>
        <link refid="_telemetry_task_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Tasks/src/StateEstimationTask.cpp</label>
        <link refid="_state_estimation_task_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>TFLI2C.h</label>
      </node>
      <node id="17">
        <label>TinyGPSPlus.h</label>
      </node>
      <node id="3">
        <label>arduino_freertos.h</label>
      </node>
      <node id="4">
        <label>queue.h</label>
      </node>
      <node id="10">
        <label>semphr.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_state_estimation_task_8h" kindref="compound">Tasks/include/StateEstimationTask.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_telemetry_task_8h" kindref="compound">Tasks/include/TelemetryTask.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_drop_o_s_8h" kindref="compound">OS/include/DropOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_o_s___c_o_n_f_i_g_8h" kindref="compound">OS_CONFIG.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_task_wrapper__t_8h" kindref="compound">OS/include/TaskWrapper_t.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_tasks_8h" kindref="compound">Tasks/include/Tasks.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="class_state_estimation_task_1a675894a0e4aee45f688f6031515fa555" kindref="member">StateEstimationTask::StateEstimationTask</ref>()</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_task_wrapper__t" kindref="compound">TaskWrapper_t</ref>(</highlight><highlight class="stringliteral">&quot;StateEstimation&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>256)<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_state_estimation_task_1ae47174728da2176c7f7c40af97aac827" kindref="member">StateEstimationTask::init</ref>()<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_task_wrapper__t_1ab970e8b20a3eeec49e76ab9545f30bc9" kindref="member">setFrequency</ref>(<ref refid="_o_s___c_o_n_f_i_g_8h_1a109a2bf274129869136183fc1fc5ba11" kindref="member">State_ESTIMATION_HZ</ref>);<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>lidarTask<sp/>=<sp/>&amp;<ref refid="class_task_wrapper__t_1a4cd207eb6571b254191f4609f912e1a6" kindref="member">LidarTask::instance</ref>();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;xLidarQueue<sp/>=<sp/>lidarTask-&gt;getLidarQueue();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;xLidarQueue<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>retrieve<sp/>instance<sp/>of<sp/>LiDAR<sp/>queue<sp/>from<sp/>task&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rather<sp/>make<sp/>this<sp/>return<sp/>no<sp/>success<sp/>and<sp/>block<sp/>in<sp/>calibration<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_state_estimation_task_1ad0d2e71bc5bd652c2d140fe7dc9ae4e9" kindref="member">StateEstimationTask::run</ref>()<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xReceived<sp/>=<sp/><sp/>xQueueReceive(this-&gt;xLidarQueue,<sp/>&amp;this-&gt;lastLidar,<sp/>pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xReceived<sp/>==<sp/>pdPASS)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;State<sp/>estimation,<sp/>reading<sp/>out<sp/>LiDAR:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(this-&gt;lastLidar.distances[0])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(this-&gt;lastLidar.distances[1])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(this-&gt;lastLidar.distances[2]);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_telemetry_task_8h_1a1190c2c6208e2e36915a767c67024fe7" kindref="member">sendTelemetry</ref>(result.c_str());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xReceived<sp/>==<sp/>errQUEUE_EMPTY<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_telemetry_task_8h_1a1190c2c6208e2e36915a767c67024fe7" kindref="member">sendTelemetry</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Queue<sp/>empty,<sp/>no<sp/>LiDAR<sp/>data<sp/>received.<sp/>Check<sp/>if<sp/>running<sp/>and<sp/>working<sp/>correctly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Tasks/src/StateEstimationTask.cpp"/>
  </compounddef>
</doxygen>
