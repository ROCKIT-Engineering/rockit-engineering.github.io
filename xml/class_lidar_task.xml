<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_lidar_task" kind="class" language="C++" prot="public">
    <compoundname>LidarTask</compoundname>
    <basecompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; LidarTask &gt;</basecompoundref>
    <includes refid="_lidar_task_8h" local="no">LidarTask.h</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_lidar_task_1ac4a28d78b2f7d3d899893ce5fdce4bb8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class TaskWrapper_t</definition>
        <argsstring></argsstring>
        <name>TaskWrapper_t</name>
        <qualifiedname>LidarTask::TaskWrapper_t</qualifiedname>
        <param>
          <type><ref refid="class_task_wrapper__t" kindref="compound">TaskWrapper_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tasks/include/LidarTask.h" line="14" column="14" bodyfile="src/Tasks/include/LidarTask.h" bodystart="14" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_lidar_task_1adbaec1ee5af00220f6996037389317a2" prot="private" static="no" mutable="no">
        <type>TFLI2C</type>
        <definition>TFLI2C LidarTask::lidarWriter</definition>
        <argsstring></argsstring>
        <name>lidarWriter</name>
        <qualifiedname>LidarTask::lidarWriter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tasks/include/LidarTask.h" line="26" column="12" bodyfile="src/Tasks/include/LidarTask.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_lidar_task_1addfb4076542744f974ac9e79092cdc11" prot="private" static="no" mutable="no">
        <type>QueueHandle_t</type>
        <definition>QueueHandle_t LidarTask::xLidarQueue</definition>
        <argsstring></argsstring>
        <name>xLidarQueue</name>
        <qualifiedname>LidarTask::xLidarQueue</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tasks/include/LidarTask.h" line="27" column="19" bodyfile="src/Tasks/include/LidarTask.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_lidar_task_1a9e285ac03ea093fa13530044d0be5c5e" prot="private" static="no" mutable="no">
        <type><ref refid="struct_lidar_data" kindref="compound">LidarData</ref></type>
        <definition>LidarData LidarTask::lastLidar</definition>
        <argsstring></argsstring>
        <name>lastLidar</name>
        <qualifiedname>LidarTask::lastLidar</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tasks/include/LidarTask.h" line="28" column="15" bodyfile="src/Tasks/include/LidarTask.h" bodystart="28" bodyend="28"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_lidar_task_1a3e255ab04ba11e8fba44415dfdf203ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void LidarTask::run</definition>
        <argsstring>() override</argsstring>
        <name>run</name>
        <qualifiedname>LidarTask::run</qualifiedname>
        <reimplements refid="class_i_task_wrapper_1a40fd8d54b5af1959987b4cc0d4588326">run</reimplements>
        <briefdescription>
<para>TODO: check this doc comment. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs in a while-true loop as long as the task is not suspended. FreeRTOs will automatically assign time slices for this method to be called. Can end itself early and wait for its next time-slice by calling FreeRTOS delay functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tasks/include/LidarTask.h" line="17" column="10" bodyfile="src/Tasks/src/LidarTask.cpp" bodystart="31" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_lidar_task_1ad7458c082900cce7b6c2ecdaef1e8699" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void LidarTask::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <qualifiedname>LidarTask::init</qualifiedname>
        <reimplements refid="class_i_task_wrapper_1a728aa2d1e0e2fdaf185e7110c0eee4a2">init</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called once before the run-loop gets started. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tasks/include/LidarTask.h" line="18" column="10" bodyfile="src/Tasks/src/LidarTask.cpp" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_lidar_task_1a14ffdb81cf7aa663d48e837d15cbc188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QueueHandle_t</type>
        <definition>QueueHandle_t LidarTask::getLidarQueue</definition>
        <argsstring>()</argsstring>
        <name>getLidarQueue</name>
        <qualifiedname>LidarTask::getLidarQueue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tasks/include/LidarTask.h" line="20" column="19" bodyfile="src/Tasks/src/LidarTask.cpp" bodystart="46" bodyend="48"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_lidar_task_1a67081cd985cfb0cc9389992455403b27" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>LidarTask::LidarTask</definition>
        <argsstring>()</argsstring>
        <name>LidarTask</name>
        <qualifiedname>LidarTask::LidarTask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tasks/include/LidarTask.h" line="23" column="14" bodyfile="src/Tasks/src/LidarTask.cpp" bodystart="10" bodyend="21"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>ITaskWrapper</label>
        <link refid="class_i_task_wrapper"/>
      </node>
      <node id="1">
        <label>LidarTask</label>
        <link refid="class_lidar_task"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>TaskWrapper_t&lt; LidarTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>ITaskWrapper</label>
        <link refid="class_i_task_wrapper"/>
      </node>
      <node id="1">
        <label>LidarTask</label>
        <link refid="class_lidar_task"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>TaskWrapper_t&lt; LidarTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/Tasks/include/LidarTask.h" line="12" column="1" bodyfile="src/Tasks/include/LidarTask.h" bodystart="13" bodyend="29"/>
    <listofallmembers>
      <member refid="class_lidar_task_1a14ffdb81cf7aa663d48e837d15cbc188" prot="public" virt="non-virtual"><scope>LidarTask</scope><name>getLidarQueue</name></member>
      <member refid="class_lidar_task_1ad7458c082900cce7b6c2ecdaef1e8699" prot="public" virt="virtual"><scope>LidarTask</scope><name>init</name></member>
      <member refid="class_task_wrapper__t_1a4cd207eb6571b254191f4609f912e1a6" prot="public" virt="non-virtual"><scope>LidarTask</scope><name>instance</name></member>
      <member refid="class_lidar_task_1a9e285ac03ea093fa13530044d0be5c5e" prot="private" virt="non-virtual"><scope>LidarTask</scope><name>lastLidar</name></member>
      <member refid="class_lidar_task_1a67081cd985cfb0cc9389992455403b27" prot="protected" virt="non-virtual"><scope>LidarTask</scope><name>LidarTask</name></member>
      <member refid="class_lidar_task_1adbaec1ee5af00220f6996037389317a2" prot="private" virt="non-virtual"><scope>LidarTask</scope><name>lidarWriter</name></member>
      <member refid="class_i_task_wrapper_1aadf4d89a473f9e21114b026cd50e9d73" prot="protected" virt="virtual"><scope>LidarTask</scope><name>onResume</name></member>
      <member refid="class_i_task_wrapper_1ac886f581a42a519b9a77657f5a632dbb" prot="protected" virt="virtual"><scope>LidarTask</scope><name>onSuspend</name></member>
      <member refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23" prot="public" virt="virtual"><scope>LidarTask</scope><name>resume</name></member>
      <member refid="class_lidar_task_1a3e255ab04ba11e8fba44415dfdf203ee" prot="public" virt="virtual"><scope>LidarTask</scope><name>run</name></member>
      <member refid="class_task_wrapper__t_1ab970e8b20a3eeec49e76ab9545f30bc9" prot="protected" virt="non-virtual"><scope>LidarTask</scope><name>setFrequency</name></member>
      <member refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3" prot="public" virt="virtual"><scope>LidarTask</scope><name>suspend</name></member>
      <member refid="class_lidar_task_1ac4a28d78b2f7d3d899893ce5fdce4bb8" prot="private" virt="non-virtual"><scope>LidarTask</scope><name>TaskWrapper_t</name></member>
      <member refid="class_task_wrapper__t_1a7ba4c703a334ebf38d7038bd6425e192" prot="protected" virt="non-virtual" ambiguityscope="TaskWrapper_t&lt; LidarTask &gt;::"><scope>LidarTask</scope><name>TaskWrapper_t</name></member>
      <member refid="class_lidar_task_1addfb4076542744f974ac9e79092cdc11" prot="private" virt="non-virtual"><scope>LidarTask</scope><name>xLidarQueue</name></member>
      <member refid="class_task_wrapper__t_1a8ae179e4a303dcec6ef5a8cd09d3be0b" prot="public" virt="virtual"><scope>LidarTask</scope><name>~TaskWrapper_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
