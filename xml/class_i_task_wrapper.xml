<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_i_task_wrapper" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ITaskWrapper</compoundname>
    <derivedcompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; DummySenderTask &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; FSMTask &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; GPSTask &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; IMUTask &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; LidarTask &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; StateEstimationTask &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; TelemetryTask &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_task_wrapper__t" prot="public" virt="non-virtual">TaskWrapper_t&lt; T &gt;</derivedcompoundref>
    <includes refid="_i_task_wrapper__t_8h" local="no">ITaskWrapper_t.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_i_task_wrapper_1ac59fc6a94bd21c4efea675a38715f913" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void ITaskWrapper::suspend</definition>
        <argsstring>()</argsstring>
        <name>suspend</name>
        <qualifiedname>ITaskWrapper::suspend</qualifiedname>
        <reimplementedby refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3">suspend</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3">suspend</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3">suspend</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3">suspend</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3">suspend</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3">suspend</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3">suspend</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1a756507aeb0164323c36493484e040ea3">suspend</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Suspends the task. Calls onSuspend. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/ITaskWrapper_t.h" line="11" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_i_task_wrapper_1add28ecec6fb06794c93b7766def40a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void ITaskWrapper::resume</definition>
        <argsstring>()</argsstring>
        <name>resume</name>
        <qualifiedname>ITaskWrapper::resume</qualifiedname>
        <reimplementedby refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23">resume</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23">resume</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23">resume</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23">resume</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23">resume</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23">resume</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23">resume</reimplementedby>
        <reimplementedby refid="class_task_wrapper__t_1abe6bb090f07f4244d77e14a9edb44e23">resume</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resumes the task. Calls onResume. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/ITaskWrapper_t.h" line="17" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_i_task_wrapper_1a728aa2d1e0e2fdaf185e7110c0eee4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ITaskWrapper::init</definition>
        <argsstring>()=0</argsstring>
        <name>init</name>
        <qualifiedname>ITaskWrapper::init</qualifiedname>
        <reimplementedby refid="class_dummy_sender_task_1ab0ed0ed9403685aaae330bd1c85b0933">init</reimplementedby>
        <reimplementedby refid="class_f_s_m_task_1a08cd96249a1062f45796e957c02f8561">init</reimplementedby>
        <reimplementedby refid="class_g_p_s_task_1a010ea6988f3bf7060ab6bc712c502ca1">init</reimplementedby>
        <reimplementedby refid="class_i_m_u_task_1aab3b032f9ff3eb6588b70387d76bfc26">init</reimplementedby>
        <reimplementedby refid="class_lidar_task_1ad7458c082900cce7b6c2ecdaef1e8699">init</reimplementedby>
        <reimplementedby refid="class_state_estimation_task_1ae47174728da2176c7f7c40af97aac827">init</reimplementedby>
        <reimplementedby refid="class_telemetry_task_1a8f55ae3e193abefbbd63af072f87878d">init</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called once before the run-loop gets started. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/ITaskWrapper_t.h" line="22" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_i_task_wrapper_1a40fd8d54b5af1959987b4cc0d4588326" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ITaskWrapper::run</definition>
        <argsstring>()=0</argsstring>
        <name>run</name>
        <qualifiedname>ITaskWrapper::run</qualifiedname>
        <reimplementedby refid="class_dummy_sender_task_1aad331ba68c64ae164b310faff6a3326e">run</reimplementedby>
        <reimplementedby refid="class_f_s_m_task_1aae5383d759a7a4894dd9f6510914082b">run</reimplementedby>
        <reimplementedby refid="class_g_p_s_task_1a7f74e369d991457063cdab8aa23f9009">run</reimplementedby>
        <reimplementedby refid="class_i_m_u_task_1a3aa345eb6aec9de96c4ad8119685e18e">run</reimplementedby>
        <reimplementedby refid="class_lidar_task_1a3e255ab04ba11e8fba44415dfdf203ee">run</reimplementedby>
        <reimplementedby refid="class_state_estimation_task_1ad0d2e71bc5bd652c2d140fe7dc9ae4e9">run</reimplementedby>
        <reimplementedby refid="class_telemetry_task_1a46abe41bb9f57a2e8960a6c667484494">run</reimplementedby>
        <briefdescription>
<para>TODO: check this doc comment. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs in a while-true loop as long as the task is not suspended. FreeRTOs will automatically assign time slices for this method to be called. Can end itself early and wait for its next time-slice by calling FreeRTOS delay functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/ITaskWrapper_t.h" line="30" column="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_i_task_wrapper_1ac886f581a42a519b9a77657f5a632dbb" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ITaskWrapper::onSuspend</definition>
        <argsstring>()</argsstring>
        <name>onSuspend</name>
        <qualifiedname>ITaskWrapper::onSuspend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called right before on task suspend. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/ITaskWrapper_t.h" line="35" column="18" bodyfile="src/OS/include/ITaskWrapper_t.h" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_i_task_wrapper_1aadf4d89a473f9e21114b026cd50e9d73" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ITaskWrapper::onResume</definition>
        <argsstring>()</argsstring>
        <name>onResume</name>
        <qualifiedname>ITaskWrapper::onResume</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called right before task resume. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/ITaskWrapper_t.h" line="40" column="18" bodyfile="src/OS/include/ITaskWrapper_t.h" bodystart="40" bodyend="40"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>DummySenderTask</label>
        <link refid="class_dummy_sender_task"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>FSMTask</label>
        <link refid="class_f_s_m_task"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>GPSTask</label>
        <link refid="class_g_p_s_task"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>IMUTask</label>
        <link refid="class_i_m_u_task"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>ITaskWrapper</label>
        <link refid="class_i_task_wrapper"/>
      </node>
      <node id="11">
        <label>LidarTask</label>
        <link refid="class_lidar_task"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>StateEstimationTask</label>
        <link refid="class_state_estimation_task"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>TaskWrapper_t&lt; T &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>TaskWrapper_t&lt; DummySenderTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>TaskWrapper_t&lt; FSMTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>TaskWrapper_t&lt; GPSTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>TaskWrapper_t&lt; IMUTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>TaskWrapper_t&lt; LidarTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>TaskWrapper_t&lt; StateEstimationTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>TaskWrapper_t&lt; TelemetryTask &gt;</label>
        <link refid="class_task_wrapper__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>TelemetryTask</label>
        <link refid="class_telemetry_task"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/OS/include/ITaskWrapper_t.h" line="5" column="1" bodyfile="src/OS/include/ITaskWrapper_t.h" bodystart="5" bodyend="41"/>
    <listofallmembers>
      <member refid="class_i_task_wrapper_1a728aa2d1e0e2fdaf185e7110c0eee4a2" prot="public" virt="pure-virtual"><scope>ITaskWrapper</scope><name>init</name></member>
      <member refid="class_i_task_wrapper_1aadf4d89a473f9e21114b026cd50e9d73" prot="protected" virt="virtual"><scope>ITaskWrapper</scope><name>onResume</name></member>
      <member refid="class_i_task_wrapper_1ac886f581a42a519b9a77657f5a632dbb" prot="protected" virt="virtual"><scope>ITaskWrapper</scope><name>onSuspend</name></member>
      <member refid="class_i_task_wrapper_1add28ecec6fb06794c93b7766def40a7b" prot="public" virt="virtual"><scope>ITaskWrapper</scope><name>resume</name></member>
      <member refid="class_i_task_wrapper_1a40fd8d54b5af1959987b4cc0d4588326" prot="public" virt="pure-virtual"><scope>ITaskWrapper</scope><name>run</name></member>
      <member refid="class_i_task_wrapper_1ac59fc6a94bd21c4efea675a38715f913" prot="public" virt="virtual"><scope>ITaskWrapper</scope><name>suspend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
