<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_state__t" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>State_t</compoundname>
    <derivedcompoundref refid="class_calibration_state" prot="public" virt="non-virtual">CalibrationState</derivedcompoundref>
    <derivedcompoundref refid="class_debug_state" prot="public" virt="non-virtual">DebugState</derivedcompoundref>
    <derivedcompoundref refid="class_idle_state" prot="public" virt="non-virtual">IdleState</derivedcompoundref>
    <includes refid="_state__t_8h" local="no">State_t.h</includes>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_state__t_1a9432ba18a45366be25655c7065658f71" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool State_t::currentlyActive</definition>
        <argsstring></argsstring>
        <name>currentlyActive</name>
        <qualifiedname>State_t::currentlyActive</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/State_t.h" line="39" column="24" bodyfile="src/OS/include/State_t.h" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_state__t_1a046861196afdb2e982361581c7f41637" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_state__t" kindref="compound">State_t</ref> *</type>
        <definition>virtual State_t * State_t::next_state</definition>
        <argsstring>()</argsstring>
        <name>next_state</name>
        <qualifiedname>State_t::next_state</qualifiedname>
        <reimplementedby refid="class_calibration_state_1a4c0b43d00ff09f789694a4957d44e51f">next_state</reimplementedby>
        <reimplementedby refid="class_debug_state_1ac53cb4de315b094193e983c3e9d2d6b1">next_state</reimplementedby>
        <reimplementedby refid="class_idle_state_1a65ede556b1bcc1ac605d6eae016bba3f">next_state</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used to determine the next state which should be entered. If no valid transition was found, nullptr should be returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/State_t.h" line="23" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_state__t_1ab340222f649c6b6b0d8ac7cf4a5bae93" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void State_t::enter</definition>
        <argsstring>() final</argsstring>
        <name>enter</name>
        <qualifiedname>State_t::enter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enter this state. Automatically resumes all necessary tasks and marks this as the global active state. After <ref refid="class_state__t_1ab340222f649c6b6b0d8ac7cf4a5bae93" kindref="member">enter()</ref> and before <ref refid="class_state__t_1a14c0660e42b7e097766644d8aa366cae" kindref="member">exit()</ref> is called, any other call to <ref refid="class_state__t_1ab340222f649c6b6b0d8ac7cf4a5bae93" kindref="member">enter()</ref> won&apos;t work. (TODO: should do something like throwing an error or something) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/State_t.h" line="29" column="18" bodyfile="src/OS/src/State_t.cpp" bodystart="4" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="class_state__t_1a14c0660e42b7e097766644d8aa366cae" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void State_t::exit</definition>
        <argsstring>() final</argsstring>
        <name>exit</name>
        <qualifiedname>State_t::exit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Exit this state. Automatically suspends all unecessary tasks and marks this state as inactive, allowing another to be entered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/State_t.h" line="34" column="18" bodyfile="src/OS/src/State_t.cpp" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_state__t_1a7024654c41680e93ddc60e7e8022ce5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; <ref refid="class_i_task_wrapper" kindref="compound">ITaskWrapper</ref> * &gt;</type>
        <definition>virtual std::vector&lt; ITaskWrapper * &gt; State_t::tasks</definition>
        <argsstring>()=0</argsstring>
        <name>tasks</name>
        <qualifiedname>State_t::tasks</qualifiedname>
        <reimplementedby refid="class_calibration_state_1af2ff37a87a5a27f1cc2bbea873ee5640">tasks</reimplementedby>
        <reimplementedby refid="class_debug_state_1a7e227abc58baf0ddff96319033a0127a">tasks</reimplementedby>
        <reimplementedby refid="class_idle_state_1abb6813618956aea7da1e2886f2baf77f">tasks</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OS/include/State_t.h" line="36" column="25"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A State in the State Machine. This stores what Tasks to run, and handles transitions to other states. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>State name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CalibrationState</label>
        <link refid="class_calibration_state"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>DebugState</label>
        <link refid="class_debug_state"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>IdleState</label>
        <link refid="class_idle_state"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>State_t</label>
        <link refid="class_state__t"/>
      </node>
    </inheritancegraph>
    <location file="src/OS/include/State_t.h" line="18" column="1" bodyfile="src/OS/include/State_t.h" bodystart="18" bodyend="40"/>
    <listofallmembers>
      <member refid="class_state__t_1a9432ba18a45366be25655c7065658f71" prot="private" virt="non-virtual"><scope>State_t</scope><name>currentlyActive</name></member>
      <member refid="class_state__t_1ab340222f649c6b6b0d8ac7cf4a5bae93" prot="public" virt="virtual"><scope>State_t</scope><name>enter</name></member>
      <member refid="class_state__t_1a14c0660e42b7e097766644d8aa366cae" prot="public" virt="virtual"><scope>State_t</scope><name>exit</name></member>
      <member refid="class_state__t_1a046861196afdb2e982361581c7f41637" prot="public" virt="virtual"><scope>State_t</scope><name>next_state</name></member>
      <member refid="class_state__t_1a7024654c41680e93ddc60e7e8022ce5b" prot="public" virt="pure-virtual"><scope>State_t</scope><name>tasks</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
